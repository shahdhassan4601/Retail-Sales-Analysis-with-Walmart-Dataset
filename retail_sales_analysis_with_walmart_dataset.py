# -*- coding: utf-8 -*-
"""Retail Sales Analysis with Walmart Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/retail-sales-analysis-with-walmart-dataset-e1f1f4c2-1f3e-434a-8254-cd681c1e5db1.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240505/auto/storage/goog4_request%26X-Goog-Date%3D20240505T225901Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D524642559a53965bd938dc1965a4d745f185b4625f19f3a23b4ca53bf9928662b70e856ad1c48cf3f898763b896bf1e5ffc0005f0dae2ba9de7c5754513af533651607f7247aeb4973d9a20130157b4ca69b9caf60b38b8462e24303a04c2d386bfd6fb9a1c9bab98e3d8f00e0db2644c262c33b99fcc699b9f6a534d262259149720fe292a239e64c420464b9a377b90939e28ac032506e528f214efa9d0255d903d82fb6b93b1d16ef36308f15c94cf2cc9d9efce7e53dcf2a820ead31a25c5d8105cf0bb0b7d5de3b4c9122f3c2661a95e4bb0c7987be6940831558d1f8ac93943e6b44080163e9afdc2472c4c17c795096e3d84c33dc983c70535ff812ac

# Retail Sales Analysis with Walmart Dataset

# Introduction
In today's competitive retail world, figuring out how to sell the most stuff is a big deal. Walmart, one of the biggest retail chains out there, has to constantly figure out how to sell more in its stores. In this project, we're going to look at a bunch of data from Walmart's stores to see if we can find any patterns or insights that might help them sell more.

# The Challenge
Selling stuff isn't easy. There are lots of things that can affect how much a store sells, like where it's located, what time of year it is, and even things like holidays. Walmart has to deal with all these things to try to sell as much as possible. We're going to try to help them out by looking at their sales data and trying to understand what's going on.

# Problem Statement
Against this backdrop, our analysis seeks to address several key questions that are central to understanding and optimizing sales performance in Walmart retail stores:

1. Which store has maximum sales?
2. Which store has maximum standard deviation i.e., the sales vary a lot?
3. Some holidays have a negative impact on sales. Find out holidays that have higher sales than the mean sales in the non-holiday season for all stores together.
4. Provide a monthly and semester view of sales in units and give insights.
5. Plot the relations between weekly sales vs. other numeric features and give insights.

# Dataset Description
Walmart runs several promotional markdown events throughout the year. These markdowns precede prominent holidays, the four largest of all, which are the Super Bowl, Labour Day, Thanksgiving, and Christmas. The weeks including these holidays are weighted five times higher in the evaluation than non-holiday weeks. Part of the challenge presented by this assignment is modeling the effects of markdowns on these holiday weeks in the absence of complete/ideal historical data. Historical sales data for 45 Walmart stores located in different regions are available.

**This is the historical data that covers sales from 2010-02-05 to 2012-11-01, in which you will find the following fields:**
- Store - the store number
- Date - the week of sales
- Weekly_Sales - sales for the given store
- Holiday_Flag - whether the week is a special holiday week 1 – Holiday week 0 – Non-holiday week
- Temperature - Temperature on the day of sale
- Fuel_Price - Cost of fuel in the region
- CPI – Prevailing consumer price index
- Unemployment - Prevailing unemployment rate

**Holiday Events**
- Super Bowl: 12-Feb-10, 11-Feb-11, 10-Feb-12, 8-Feb-13
- Labour Day: 10-Sep-10, 9-Sep-11, 7-Sep-12, 6-Sep-13
- Thanksgiving: 26-Nov-10, 25-Nov-11, 23-Nov-12, 29-Nov-13
- Christmas: 31-Dec-10, 30-Dec-11, 28-Dec-12, 27-Dec-13

# Install libraries
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

"""# Exploratory Data Analysis (EDA)

# 1. Import Data

Read the dataset
"""

data = pd.read_csv("/kaggle/input/walmart-dataset-retail/Walmart_Store_sales.csv")

"""# 2. Display Data"""

data.head(10)

data.sample(10)

data.tail(10)

"""# Data Preprocessing"""

data.info()

data.dtypes

"""As noticed the data type of the "Date" is object to date so we will convert it into Date"""

# Convert "Date" to datetime formate
data['Date'] =  pd.to_datetime(data['Date'], format='%d-%m-%Y')
data.info()

data.describe()

"""# 3. Visualize quantitative variables distributions"""

walmart_data = data[['Weekly_Sales','Temperature', 'Fuel_Price', 'CPI', 'Unemployment']]
walmart_data.head()

walmart_data.hist(bins=10, grid= False, figsize=(10,10), color='skyblue', edgecolor='black')

# set the figure size for the subplots
plt.figure(figsize=(10, 10))


# 1st subplot ('Temperature')
plt.subplot(2,2,1)
sns.boxplot(y = walmart_data['Temperature'])
plt.xlabel('Temperature')
plt.ylabel('Values')
plt.title('Boxplot of Temperature')

# 2nd subplot ('Fuel_Price')
plt.subplot(2,2,2)
sns.boxplot(y = walmart_data['Fuel_Price'])
plt.xlabel('Fuel_Price')
plt.ylabel('Values')
plt.title('Boxplot of Fuel_Price')

# 3rd subplot ('CPI')
plt.subplot(2,2,3)
sns.boxplot(y = walmart_data['CPI'])
plt.xlabel('CPI')
plt.ylabel('Values')
plt.title('Boxplot of CPI')

# 4th subplot ('Unemployment')
plt.subplot(2,2,4)
sns.boxplot(y = walmart_data['Unemployment'])
plt.xlabel('Unemployment')
plt.ylabel('Values')
plt.title('Boxplot of Unemployment')

# Drop outliers
walmart_data = walmart_data[(walmart_data['Temperature']>10) & (walmart_data['Unemployment']>4.5) & (walmart_data['Unemployment']<10)]
walmart_data.head()

# set the figure size for the subplots
plt.figure(figsize=(10, 10))


# 1st subplot ('Temperature')
plt.subplot(2,2,1)
sns.boxplot(y = walmart_data['Temperature'])
plt.xlabel('Temperature')
plt.ylabel('Values')
plt.title('Boxplot of Temperature')

# 2nd subplot ('Fuel_Price')
plt.subplot(2,2,2)
sns.boxplot(y = walmart_data['Fuel_Price'])
plt.xlabel('Fuel_Price')
plt.ylabel('Values')
plt.title('Boxplot of Fuel_Price')

# 3rd subplot ('CPI')
plt.subplot(2,2,3)
sns.boxplot(y = walmart_data['CPI'])
plt.xlabel('CPI')
plt.ylabel('Values')
plt.title('Boxplot of CPI')

# 4th subplot ('Unemployment')
plt.subplot(2,2,4)
sns.boxplot(y = walmart_data['Unemployment'])
plt.xlabel('Unemployment')
plt.ylabel('Values')
plt.title('Boxplot of Unemployment')

"""# 4. Data Cleaning"""

# Check for null values
data.isnull().sum()

# Check for duplicated values
data.duplicated().sum()

"""<hr>

<h2>1. Which store has maximum sales?<h2>
"""

total_sales = data.groupby('Store')['Weekly_Sales'].sum().sort_values(ascending=False)
total_sales.head(1)

"""bar plot visualize the total sales of each store, the max and the min store's total sales"""

plt.figure(figsize=(10, 6))
total_sales.plot(kind='bar')

"""Store 20 has the maximum total_sales

<hr>

<h2>2. Which store has maximum standard deviation i.e., the sales vary a lot<h2>
"""

max_std = data.groupby('Store')['Weekly_Sales'].std().sort_values(ascending=False)
max_std.head(1)

"""Bar plot visualize the stores with their std, the max and min store's std"""

plt.figure(figsize=(10, 6))
max_std.plot(kind='bar')

"""histogram shows the frequancies of std for each store"""

max_std.plot(kind='hist', bins=15, edgecolor= 'black')

"""Store 14 has the maximum standared deviation (its sales vary alot)

<hr>

<h2>3. Some holidays have a negative impact on sales. Find out holidays that have higher sales than the mean sales in the non-holiday season for all stores together.<h2>
"""

# Holidays Events
Super_Bowl =['12-2-2010', '11-2-2011', '10-2-2012']
Labour_Day =  ['10-9-2010', '9-9-2011', '7-9-2012']
Thanksgiving =  ['26-11-2010', '25-11-2011', '23-11-2012']
Christmas = ['31-12-2010', '30-12-2011', '28-12-2012']

# Find the mean for all stores sales for each day
non_holidays_sales = data[data['Holiday_Flag'] == 0]['Weekly_Sales'].mean()
non_holidays_sales

# Find the mean for all stores sales for holidays
# day_sales.loc[day_sales.Date.isin(Super_Bowl)]
# Convert holiday lists to datetime objects
Super_Bowl = pd.to_datetime(Super_Bowl, format='%d-%m-%Y')
Labour_Day = pd.to_datetime(Labour_Day, format='%d-%m-%Y')
Thanksgiving = pd.to_datetime(Thanksgiving, format='%d-%m-%Y')
Christmas = pd.to_datetime(Christmas, format='%d-%m-%Y')

# Filter data for each holiday and calculate mean of total store sales
super_bowl_sales = data[data['Date'].isin(Super_Bowl)]['Weekly_Sales'].mean()
labour_day_sales = data[data['Date'].isin(Labour_Day)]['Weekly_Sales'].mean()
thanksgiving_sales = data[data['Date'].isin(Thanksgiving)]['Weekly_Sales'].mean()
christmas_sales = data[data['Date'].isin(Christmas)]['Weekly_Sales'].mean()

print("super_bowl_sales: ", super_bowl_sales)
print("labour_day_sales: ", labour_day_sales)
print("thanksgiving_sales: ", thanksgiving_sales)
print("christmas_sales: ", christmas_sales)
print("non_holidays_sales: ", non_holidays_sales)

"""As noticed, Thanks giving, Super bowl, and Labour day have higher sales than the mean sales in the non-holiday season for all stores together.

<hr>

<h2>4. Provide a monthly and semester view of sales in units and give insights.<h2>
"""

# Create new columns for months and years
data['Month'] = pd.DatetimeIndex(data['Date']).month
data['Year'] = pd.DatetimeIndex(data['Date']).year
data.head()

plt.figure(figsize=(10,6))
plot = sns.barplot(x=data[data.Year==2010]['Month'], y=data[data.Year==2010]['Weekly_Sales'])
plt.title('Monthly sales review in 2010')
plot.bar_label(plot.containers[0], padding= 25, fontsize=7)

"""As noticed, December was the highest month in sales in 2010 and Octuber was the least one"""

plt.figure(figsize=(10,6))
plot = sns.barplot(x=data[data.Year==2011]['Month'], y=data[data.Year==2011]['Weekly_Sales'])
plt.title('Monthly sales review in 2011')
plot.bar_label(plot.containers[0], padding= 25, fontsize=6)

"""As noticed, December was the highest month in sales in 2011 and January was the least one

Dataset provides data of 10 months only in 2012
"""

plt.figure(figsize=(10,6))
plot = sns.barplot(x=data[data.Year==2012]['Month'], y=data[data.Year==2012]['Weekly_Sales'])
plt.title('Monthly sales review in 2012')
plot.bar_label(plot.containers[0], padding= 25, fontsize=8)

"""In the 10 months of 2012, Jun was the highest month in sales and January was the least one

<h3>Semester sales review<h3>
"""

# Define function to determine the semester based on month
def get_semester(month):
    if month in range(1, 7):
        return '1st Semester'
    else:
        return '2nd Semester'

# Apply the function to create 'Semester' column
data['Semester'] = data['Month'].apply(get_semester)
data.head()

semester_sales = data.groupby('Semester')['Weekly_Sales'].sum()
semester_sales

sns.barplot(y=semester_sales, x=semester_sales.index)

"""The sales in 2nd semester is little greater than the sales in the 1st one.

<h3>Yearly review of sales<h3>
"""

yearly_sales = pd.DataFrame(data.groupby('Year')['Weekly_Sales'].sum())

plt.figure(figsize=(10,6))
plot = sns.barplot(x = yearly_sales.index, y = yearly_sales['Weekly_Sales'], width=0.5)
plot.bar_label(plot.containers[0], padding=3, fontsize=8)

"""As noticed, 2011 was the highest year in sales and 2012 was the least one

<h2>5. Plot the relations between weekly sales vs. other numeric features and give insights.<h2>
"""

plt.figure(figsize=(10,10))
plt.subplot(2,1,1)
sns.lineplot(x=walmart_data['Temperature'], y=walmart_data['Weekly_Sales'], errorbar=None)
plt.title('Weekly_Sales vs Temperature')
plt.subplot(2,1,2)
sns.scatterplot(x=walmart_data['Temperature'], y=walmart_data['Weekly_Sales'])
plt.show()

# plt.figure(figsize=(10,6))
# sns.lineplot(x=walmart_data['Fuel_Price'], y=walmart_data['Weekly_Sales'], errorbar=None)
plt.figure(figsize=(10,10))
plt.subplot(2,1,1)
sns.lineplot(x=walmart_data['Fuel_Price'], y=walmart_data['Weekly_Sales'], errorbar=None)
plt.title('Weekly_Sales vs Fuel_Price')
plt.subplot(2,1,2)
sns.scatterplot(x=walmart_data['Fuel_Price'], y=walmart_data['Weekly_Sales'])
plt.show()

# plt.figure(figsize=(10,6))
# sns.lineplot(x=walmart_data['CPI'], y=walmart_data['Weekly_Sales'], errorbar=None)
plt.figure(figsize=(10,10))
plt.subplot(2,1,1)
sns.lineplot(x=walmart_data['CPI'], y=walmart_data['Weekly_Sales'], errorbar=None)
plt.title('Weekly_Sales vs CPI')
plt.subplot(2,1,2)
sns.scatterplot(x=walmart_data['CPI'], y=walmart_data['Weekly_Sales'])
plt.show()

plt.figure(figsize=(10,10))
plt.subplot(2,1,1)
sns.lineplot(x=walmart_data['Unemployment'], y=walmart_data['Weekly_Sales'], errorbar=None)
plt.title('Weekly_Sales vs Unemployment')
plt.subplot(2,1,2)
sns.scatterplot(x=walmart_data['Unemployment'], y=walmart_data['Weekly_Sales'])
plt.show()

sns.barplot(x=data['Holiday_Flag'], y=data['Weekly_Sales'])

"""<h3>Correlation between Weekly Sales and other features<h3>"""

walmart_data = data[['Weekly_Sales','Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment']]
sns.heatmap(walmart_data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)

"""The is no relationship between Weekly Sales and other numerical features as the correlation between them is very near to zero"""